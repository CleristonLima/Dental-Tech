@model AgendamentoModel

<h3 class="titulo-cadastro">Cadastro de agendamento</h3>

@if (TempData["ErrorHorario"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorHorario"]
    </div>
}

<form asp-controller="Agendamento" asp-action="CadastroAgendamento" method="post">
    <input type="hidden" asp-for="IdMedConsXPat" />

    <div class="form-group paciente-row">
        <label for="searchPatient">Paciente</label>
        <div class="form-inline">
            <select id="IdPatients" asp-for="IdPatients" class="form-control combo-paciente" asp-items="ViewBag.ListaPacientes" required="required">
                <option value="">Selecione o paciente</option>
            </select>
            <input type="text" id="searchPatient" class="form-control filtro-paciente" placeholder="Pesquisar paciente..." oninput="filtrarPacientes()">
        </div>
    </div>
    <br />
    <div class="form-group medico-row">
        <label for="searchDoctor">Dr(a)</label>
        <div class="form-inline">
            <select id="IdDoctor" asp-for="IdDoctor" class="form-control combo-medico" asp-items="ViewBag.ListaMedicos" required="required">
                <option value="">Selecione o medico</option>
            </select>
            <input type="text" id="searchDoctor" class="form-control filtro-medico" placeholder="Pesquisar médico..." oninput="filtrarMedicos()">
        </div>
    </div>
    <br />
    <div class="form-group consultation-row">
        <label for="searchConsultation">Consulta</label>
        <div class="form-inline">
            <select id="IdMedicalConsultation" asp-for="IdMedicalConsultation" class="form-control combo-consulta" asp-items="ViewBag.ListaTipoConsultas">
                <option value="">Selecione a consulta</option>
            </select>
            <input type="text" id="searchConsultation" class="form-control filtro-consulta" placeholder="Pesquisar consulta ou exame..." oninput="filtrarConsulta()">
        </div>
    </div>
    <br />
    <div class="form-group">
        <label>Data e Hora Inicial da Consulta:</label>
        <input type="datetime-local" name="DateConsultationStart" id="dataHoraInicio"
               min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
        <span asp-validation-for="DateConsultationStart" class="text-danger"></span>
    </div>
    <br />
    <div class="form-group">
        <label>Data e Hora Final da Consulta:</label>
        <input type="datetime-local" name="DateConsultationFinish" id="dataHoraFim"
               min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
        <span asp-validation-for="DateConsultationFinish" class="text-danger"></span>
    </div>
    <br />
    <div class="form-group">
        <br />
        <label>Status</label>
        <select asp-for="StatusConsultation" class="form-control">
            <option value="Agendado">Agendado</option>
            <option value="Realizada">Realizada</option>
            <option value="Confirmado">Confirmado</option>
        </select>
        <span asp-validation-for="StatusConsultation" class="text-danger"></span>
    </div>
    <br />

    <div class="form-group">
        <br />
        <label>Observação</label>

        @{
            var vObs = "";

            try
            {

                vObs = ViewBag.Agendamento.Reason;
            }
            catch { }
        }

        @Html.TextArea("Reason", vObs, new { @class = "form-control" })

        <!--<span asp-validation-for="Reason" class="text-danger"></span>-->
    </div>
    <br />
    <br />
    <button type="submit" class="btn btn-success">Salvar</button>
</form>

<style>

    #dataHora {
        width: 150px; /* ajusta o tamanho do campo de texto */
        margin-right: 15px; /* espaçamento entre o campo de texto e o botão */
    }

    .titulo-cadastro {
        white-space: nowrap; /* Impede a quebra de linha */
        text-align: center; /* Centraliza o texto */
        margin-bottom: 20px; /* Adiciona um espaço abaixo do título */
    }

    .medico-row {
        display: flex;
        flex-direction: column; /* Responsivo */
        gap: 10px;
    }

    .paciente-row {
        display: flex;
        flex-direction: column; /* Responsivo */
        gap: 10px;
    }

    .consultation-row {
        display: flex;
        flex-direction: column; /* Responsivo */
        gap: 10px;
    }

    .form-inline {
        display: flex;
        align-items: center;
        gap: 10px; /* Espaço entre os elementos */
    }

    .combo-consulta, .filtro-consulta, .combo-medico, .filtro-medico, .combo-paciente, .filtro-paciente {
        flex: 1; /* Tamanho proporcional */
    }

    @@media (max-width: 768px) {
        .form-inline {
            flex-direction: column; /* Ajusta para empilhar no celular */
        }
    }

</style>

<script>

    function checkInternetConnection() {
        if (!navigator.onLine) {
            alert("Sem conexao com a internet. Verifique sua rede e tente novamente.");
        }
    }

    window.addEventListener('load', checkInternetConnection);
    window.addEventListener('offline', checkInternetConnection);

    document.addEventListener('DOMContentLoaded', function () {
        var errorMessage = '@TempData["ErrorLogin"]';
        if (errorMessage) {
            alert(errorMessage);
        }
    });

    document.getElementById("dataConsulta").addEventListener("change", function () {
        var data = this.value;

        // Chamada AJAX para obter horários disponíveis e a duração da consulta
        fetch(`/AgendamentoController/ObterHorariosDisponiveis?data=${data}`)
            .then(response => response.json())
            .then(result => {
                var horarios = result.Horarios;
                var horarioConsultaInicio = document.getElementById("horarioConsultaInicio");
                horarioConsultaInicio.innerHTML = "<option value=''>Selecione um horário</option>";

                horarios.forEach(horario => {
                    var option = document.createElement("option");
                    option.value = horario.Inicio;
                    option.text = new Date(horario.Inicio).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                    option.setAttribute("data-fim", horario.Fim);
                    horarioConsultaInicio.appendChild(option);
                });

                // Evento para atualizar o horário final quando o início for selecionado
                horarioConsultaInicio.addEventListener("change", function () {
                    var horarioSelecionado = horarioConsultaInicio.options[horarioConsultaInicio.selectedIndex];
                    var horarioFim = horarioSelecionado.getAttribute("data-fim");
                    document.getElementById("horarioConsultaFim").value = horarioFim;
                });
            })
            .catch(error => console.error('Erro ao buscar horários:', error));
    });

    document.addEventListener('DOMContentLoaded', function () {
        const searchDoctorInput = document.getElementById('searchDoctor');
        const searchPatientInput = document.getElementById('searchPatient');
        const searchConsultationInput = document.getElementById('searchConsultation');

        if (searchDoctorInput) {
            searchDoctorInput.addEventListener('keypress', function (e) {
                if (e.key === 'Enter') {
                    e.preventDefault(); // Evita que o formulário seja submetido ao pressionar Enter
                    filtrarMedicos();
                }
            });
        }

        if (searchPatientInput) {
            searchPatientInput.addEventListener('keypress', function (e) {
                if (e.key === 'Enter') {
                    e.preventDefault(); // Evita que o formulário seja submetido ao pressionar Enter
                    filtrarPacientes();
                }
            });
        }

        if (searchConsultationInput) {
            searchConsultationInput.addEventListener('keypress', function (e) {
                if (e.key === 'Enter') {
                    e.preventDefault(); // Evita que o formulário seja submetido ao pressionar Enter
                    filtrarMedicamentos();
                }
            });
        }
    });

    function filtrarMedicos() {
        const termo = document.getElementById('searchDoctor').value.toLowerCase();
        const select = document.getElementById('IdDoctor');
        const options = select.getElementsByTagName('option');

        let encontrado = false;

        for (let i = 0; i < options.length; i++) {
            const nomeMedico = options[i].text.toLowerCase();
            if (nomeMedico.includes(termo)) {
                select.value = options[i].value;
                encontrado = true;
                break;
            }
        }

        if (!encontrado) {
            alert('Médico não encontrado.');
            document.getElementById("searchDoctor").value = '';
            document.getElementById("IdDoctor").value = '';
            document.getElementById("searchDoctor").focus();
        }
    }

    function filtrarPacientes() {
        const termo = document.getElementById('searchPatient').value.toLowerCase();
        const select = document.getElementById('IdPatients');
        const options = select.getElementsByTagName('option');

        let encontrado = false;

        for (let i = 0; i < options.length; i++) {
            const nomePaciente = options[i].text.toLowerCase();
            if (nomePaciente.includes(termo)) {
                select.value = options[i].value;
                encontrado = true;
                break;
            }
        }

        if (!encontrado) {
            alert('Paciente não encontrado.');
            document.getElementById("searchPatient").value = '';
            document.getElementById("IdPatients").value = '';
            document.getElementById("searchPatient").focus();
        }
    }

    function filtrarConsulta() {
        const termo = document.getElementById('searchConsultation').value.toLowerCase();
        const select = document.getElementById('IdMedicalConsultation');
        const options = select.getElementsByTagName('option');

        let encontrado = false;

        for (let i = 0; i < options.length; i++) {
            const nomeConsulta = options[i].text.toLowerCase();
            if (nomeConsulta.includes(termo)) {
                select.value = options[i].value;
                encontrado = true;
                break;
            }
        }

        if (!encontrado) {
            alert('Consulta ou exame não encontrada.');
            document.getElementById("searchConsultation").value = '';
            document.getElementById("IdMedicalConsultation").value = '';
            document.getElementById("searchConsultation").focus();
        }

    }
</script>